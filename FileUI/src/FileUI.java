/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author anuj
 */

import javax.swing.*;
import java.io.*;
import java.sql.*;

public class FileUI extends javax.swing.JFrame {

    private static Connection conn = null;
    private static Statement stmt = null;
    private static ResultSet rs = null;
    private static int cntStud = 0;
    private static int cntStudCourse = 0;
    private static int cntCourseName = 0;
    private static int cntExam = 0;
    

    
    public FileUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtStudent = new javax.swing.JTextField();
        txtStudCourses = new javax.swing.JTextField();
        txtCourseNames = new javax.swing.JTextField();
        txtExam = new javax.swing.JTextField();
        btnStudent = new javax.swing.JButton();
        btnStudCourses = new javax.swing.JButton();
        btnCourseNames = new javax.swing.JButton();
        btnExam = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel5.setText("Student File");

        jLabel6.setText("Student Courses File");

        jLabel7.setText("Course Names File");

        jLabel8.setText("Exam File");

        btnStudent.setText("Browse");
        btnStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseStudentActionPerformed(evt);
            }
        });

        btnStudCourses.setText("Browse");
        btnStudCourses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStudCourseActionPerformed(evt);
            }
        });

        btnCourseNames.setText("Browse");
        btnCourseNames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCourseNamesActionPerformed(evt);
            }
        });

        btnExam.setText("Browse");
        btnExam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExamActionPerformed(evt);
            }
        });

        jButton1.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.background"));
        jButton1.setForeground(new java.awt.Color(50, 100, 52));
        jButton1.setText("Upload");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpload(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtStudCourses, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                    .addComponent(txtCourseNames)
                    .addComponent(txtExam)
                    .addComponent(txtStudent))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(btnCourseNames))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnExam))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnStudent)
                            .addComponent(btnStudCourses))))
                .addGap(43, 43, 43))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(192, 192, 192))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(btnStudent))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtStudCourses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(btnStudCourses))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCourseNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(btnCourseNames))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtExam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExam)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(33, 33, 33))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpload(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpload
        
        String csvStud = txtStudent.getText();
        BufferedReader br = null;
        String splitAccTo = ",", line = "";
            
        try
        {
            br = new BufferedReader(new FileReader(csvStud));
            int in = 0, out = 0;
            while((line = br.readLine()) != null)
            {
                String str[] = line.split(splitAccTo);
                try
                {
                   out = FileUI.addToDatabaseStudents(str);
                   in++;
                }
                    
                catch(Exception e)
                {
                   JOptionPane.showMessageDialog(null, e.toString(), "Error",JOptionPane.ERROR_MESSAGE);
                }
            }
            JOptionPane.showMessageDialog(null, "Records read: " + in + "\nRecords added to database: " + out + "\n Invalid records: " + (in - out) , "Students", JOptionPane.INFORMATION_MESSAGE);
        }
            
        catch(IOException ioe)
        {
            JOptionPane.showMessageDialog(null, ioe.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        String csvStudCourse = txtStudCourses.getText();
        br = null;
        line = "";
            
        try
        {
            br = new BufferedReader(new FileReader(csvStudCourse));
            int in = 0, out = 0;    
            while((line = br.readLine()) != null)
            {
                String str[] = line.split(splitAccTo);
                try
                {
                    out = FileUI.addToDatabaseStudCourses(str);
                    in++;
                }
                    
                catch(Exception e)
                {
                   JOptionPane.showMessageDialog(null, e.toString(), "Error1",JOptionPane.ERROR_MESSAGE);
                }
            }
            JOptionPane.showMessageDialog(null,"Records read: " + in + "\nRecords added to database: " + out + "\n Invalid records: " + (in - out), "Student Courses", JOptionPane.INFORMATION_MESSAGE);
        }
            
        catch(IOException ioe)
        {
            JOptionPane.showMessageDialog(null, ioe.toString(), "Error2", JOptionPane.ERROR_MESSAGE);
        }
        
        String csvCourseNames = txtCourseNames.getText();
        br = null;
        line = "";
            
        try
        {
            int in = 0, out = 0;
            br = new BufferedReader(new FileReader(csvCourseNames));
                
            while((line = br.readLine()) != null)
            {
                String str[] = line.split(splitAccTo);
                try
                {
                    out = FileUI.addToDatabaseCourseNames(str);
                    in++;
                }
                    
                catch(Exception e)
                {
                   JOptionPane.showMessageDialog(null, e.toString(), "Error",JOptionPane.ERROR_MESSAGE);
                }
            }
            JOptionPane.showMessageDialog(null, "Records read: " + in + "\nRecords added to database: " + out + "\n Invalid records: " + (in - out), "Course Names", JOptionPane.INFORMATION_MESSAGE);
        }
            
        catch(IOException ioe)
        {
            JOptionPane.showMessageDialog(null, ioe.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }

        
        String csvExam = txtExam.getText();
        br = null;
        line = "";
            
        try
        {
            br = new BufferedReader(new FileReader(csvExam));
            int in = 0, out = 0;    
            while((line = br.readLine()) != null)
            {
                String str[] = line.split(splitAccTo);
                try
                {
                    out = FileUI.addToDatabaseExam(str);
                    in++;
                }
                    
                catch(Exception e)
                {
                   JOptionPane.showMessageDialog(null, e.toString(), "Error",JOptionPane.ERROR_MESSAGE);
                }
            }
           JOptionPane.showMessageDialog(null, "Records read: " + in + "\nRecords added to database: " + out + "\n Invalid records: " + (in - out), "Exams", JOptionPane.INFORMATION_MESSAGE);
        }
            
        catch(IOException ioe)
        {
            JOptionPane.showMessageDialog(null, ioe.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
       
    }//GEN-LAST:event_btnUpload

    public static int addToDatabaseStudents(String str[]) throws Exception
    {   
        Student s = new Student(str);
        String strx[] = s.transform();
        try
        {   
            if(strx[0] != "Invalid StudentID" )
            {
                cntStud++;
                String sql = "INSERT INTO Students VALUES('" + strx[0] + "', '" + strx[1] + "', '" + strx[2] + "', '" + strx[3] + "', '" + strx[4] + "', '" + strx[5] + "', '" + strx[6] + "')";
                stmt.executeUpdate(sql);            
            }
        }
        
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        return cntStud;
    }
 
    
    public static int addToDatabaseStudCourses(String str[]) throws Exception
    {       
        StudCourses sc = new StudCourses(str);
        String strx[] = sc.transform();
        
        try
        {  
            if(strx[0] != "Invalid StudentID" )
            {
                cntStudCourse++;
                String sql = "INSERT INTO StudentCourses VALUES('" + strx[0] + "', '" + strx[1] + "')";
                stmt.executeUpdate(sql);
            }
        }
        
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        return cntStudCourse;
    }
    
    public static int addToDatabaseCourseNames(String str[]) throws Exception
    {
        CourseNames cn = new CourseNames(str);
        String strx[] = cn.transform();
        
        try
        {   
            if(strx[0] != "Invalid Course Code")
            {
                cntCourseName++;
                String sql = "INSERT INTO CourseNames VALUES('" + strx[0] + "', '" + strx[1] + "')";
                stmt.executeUpdate(sql);
            }
        }
        
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        return cntCourseName;
    }
    
    public static int addToDatabaseExam(String str[]) throws Exception
    {       
        Exam ex = new Exam(str);
        String strx[] = ex.transform();
        
        try
        {
            if(strx[0] != "Invalid StudentID" )
            {
                cntExam++;
                String sql = "INSERT INTO Exams VALUES('" + strx[0] + "', '" + strx[1] + "', '" + strx[2] + "')";
                stmt.executeUpdate(sql);
            }
        }
        
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        return cntExam;
    }

    
    
    private void btnBrowseStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseStudentActionPerformed
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new java.io.File("."));
            chooser.setDialogTitle("choosertitle");
            
            chooser.setAcceptAllFileFilterUsed(false);

            if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION)
            {
                String str =  chooser.getSelectedFile().getAbsolutePath();
                txtStudent.setText( str );
            }
    }//GEN-LAST:event_btnBrowseStudentActionPerformed

    private void btnStudCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStudCourseActionPerformed
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new java.io.File("."));
            chooser.setDialogTitle("choosertitle");
            
            chooser.setAcceptAllFileFilterUsed(false);

            if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION)
            {
                String str =  chooser.getSelectedFile().getAbsolutePath();
                txtStudCourses.setText( str );
            }

    }//GEN-LAST:event_btnStudCourseActionPerformed

    private void btnCourseNamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCourseNamesActionPerformed
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new java.io.File("."));
            chooser.setDialogTitle("choosertitle");
            
            chooser.setAcceptAllFileFilterUsed(false);

            if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION)
            {
                String str =  chooser.getSelectedFile().getAbsolutePath();
                txtCourseNames.setText( str );
            }

    }//GEN-LAST:event_btnCourseNamesActionPerformed

    private void btnExamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExamActionPerformed
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new java.io.File("."));
            chooser.setDialogTitle("choosertitle");
            
            chooser.setAcceptAllFileFilterUsed(false);

            if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION)
            {
                String str =  chooser.getSelectedFile().getAbsolutePath();
                txtExam.setText( str );
            }

    }//GEN-LAST:event_btnExamActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        final String jdbcDriver = "com.mysql.jdbc.Driver";
        final String dbURL = "jdbc:mysql://localhost:3306/University";
    
        try
        {
            Class.forName(jdbcDriver);
            conn = DriverManager.getConnection(dbURL, "root", "anujk1998");
            stmt = conn.createStatement();
     
        }
        
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
        try
        {
            if(stmt != null)
                stmt.close();
            if(rs != null)
                rs.close();
            if(conn != null)
                conn.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
 
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FileUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FileUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FileUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FileUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FileUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCourseNames;
    private javax.swing.JButton btnExam;
    private javax.swing.JButton btnStudCourses;
    private javax.swing.JButton btnStudent;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField txtCourseNames;
    private javax.swing.JTextField txtExam;
    private javax.swing.JTextField txtStudCourses;
    private javax.swing.JTextField txtStudent;
    // End of variables declaration//GEN-END:variables
}

class Student
{
    private String id,name,dob,addr,sex,mn;
    
    public Student()
    {
        
    }
    
    public Student(String s[])
    {
        id = s[0];
        name = s[1];
        dob = s[2];
        addr = s[3];
        sex = s[4];
        mn = "";
    }
    
    public String[] transform()
    {
        String s[] = new String[7];
        s[0] = validateStudID(id);
        String ss[] = validateNames(name);
        s[1] = ss[0];
        s[2] = ss[1];
        s[3] = ss[2];
        s[4] = validateDOB(dob);
        s[5] = validateAddr(addr);
        s[6] = validateSex(sex);
        
        return s;
    }          
    
    public String validateStudID(String s)
    {
        if(s.length() != 10 || !Character.isLetter(s.charAt(0)))
        {
            //invalid entry
            //return
            return "Invalid StudentID";
        }
        
        for(int i=1; i<s.length(); i++)
        {
            if(!Character.isDigit(s.charAt(i)))
            {
                return "Invalid StudentID";
            }
        }
        
        if(Character.isLowerCase(s.charAt(0)))
            s = s.toUpperCase();
             
        return s;
    }
    
    private String[] validateNames(String s)
    {
        s = s.toUpperCase();
        
        String str[]  = s.split(" ");
        
        for(int i=0; i<str.length; i++)
        {
            for(int j=0; j<str[i].length(); j++)
            {    
                if(!Character.isLetter(str[i].charAt(j)) & str[i].charAt(j) != '.')
                {
                    str[i] = str[i].replace(str[i].charAt(j), '\0');
                }
            }
                    
        }
        
        String fn, mn, ln;
        mn = ln = "";
        fn = str[0];
        if(str.length >= 3)
        {
            ln = str[str.length-1];
            for(int i=1; i<str.length-1; i++)
                mn = mn + str[i] + " ";
        }
        
        else if(str.length == 2)
            ln = str[1];
       
        
        String strx[] = new String[3];
        strx[0] = fn;
        strx[1] = mn;
        strx[2] = ln;
        
        return strx;
    }
    
    private String validateDOB(String s)
    {
        if((s.charAt(2) != '.' & s.charAt(2) != '-' & s.charAt(2) != '/') || (s.charAt(2) != '.' & s.charAt(5) != '-' & s.charAt(5) != '/'))
            return "Invalid DOB";
            
        char c1 = s.charAt(0);
        char c2 = s.charAt(1);
        String s1 = Character.toString(c1);
        String s2 = Character.toString(c2);
        String dd = s1 + s2;
        c1 = s.charAt(3);
        c2 = s.charAt(4);
        s1 = Character.toString(c1);
        s2 = Character.toString(c2);
        
        String mm = s1 + s2;
        
        if(Integer.parseInt(dd) < 1 || Integer.parseInt(dd) > 31)
            return "Invalid DOB";
        
        if(Integer.parseInt(mm) >= 12 & Integer.parseInt(mm) <= 31)
        {
            String temp = dd;
            dd = mm;
            mm = temp;
        }
      
        String dob = dd + s.charAt(2) + mm + s.charAt(5) + s.charAt(6) + s.charAt(7) + s.charAt(8) + s.charAt(9);
        
        return dob;
    }
    
    private String validateAddr(String s)
    {
             
        for(int i=0; i<s.length(); i++)
        {
           if(s.charAt(i) != '-' & s.charAt(i) != '.' & s.charAt(i) != '/' & !Character.isLetterOrDigit(s.charAt(i)))
           {
               return "Invalid address";
           }
        }
        
        return s;
    }
    
    private String validateSex(String s)
    {
        s = s.toUpperCase();
        return s;
    }
}

class StudCourses 
{
    private String id, cc;
    
    public StudCourses()
    {
        
    }
    
    public StudCourses(String s[])
    {
        id = s[0];
        cc = s[1];
    }
    
    public String[] transform()
    {
        String s[] = new String[2];
        Student stud = new Student();
        s[0] = stud.validateStudID(id);
        s[1] = validateCourseCode(cc);
        
        return s;
    }
    
    public String validateCourseCode(String s)
    {
        if(s.length() != 5 || !Character.isLetter(s.charAt(0)) || !Character.isLetter(s.charAt(1)) || !Character.isDigit(s.charAt(2)) || !Character.isDigit(s.charAt(3)) || !Character.isDigit(s.charAt(4)))
            return "Invalid Course Code";
        
        return s;
    }   
}    

class CourseNames
{
    private String cc, cn;
    
    public CourseNames(String str[])
    {
        cc = str[0];
        cn = str[1];
    }
    
    public String[] transform()
    {
        String s[] = new String[2];
        StudCourses sc = new StudCourses();
        s[0] = sc.validateCourseCode(cc);
        s[1] = cn;
        
        return s;
    }
}

class Exam
{
    private String id, cc, marks;
    
    public Exam(String str[])
    {
        id = str[0];
        cc = str[1];
        marks = str[2];
    }
    
    public String[] transform()
    {
        String s[] = new String[3];
        Student stud = new Student();
        s[0] = stud.validateStudID(id);
        StudCourses sc = new StudCourses();
        s[1] = sc.validateCourseCode(cc);
        s[2] = validateMarks(marks);
        
        return s;
    }
    
    private String validateMarks(String s)
    {
        if(s.length() > 3)
            return "Invalid entry of marks";
        
        int m = Integer.parseInt(s);
        if(m >= 0 & m <= 100)
            return s;
        else
            return "-- FAIL/ABSENT";
    }
}
